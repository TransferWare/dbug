#!@PERL@ -w
#
# Description: Print output of the DBUG library in a human readable format.
#
# Usage:       dbugrpt [ options ]
#
# Notes:       The file dbugrpt is generated from dbugrpt.in by the m4 macro 
#              preprocessor. The following macro's are expanded:
#              - @PERL@
#              - @DBUGRPT_PREFIX_SEPARATOR@
#              - @PACKAGE_VERSION@
#
#              Please do not modify dbugrpt but dbugrpt.in instead.
#

use Getopt::Std;
use strict;
use Carp qw(carp);
use warnings;
use bignum;

getopts('d:DFhiLnNPr:t:Tv');

my %break_points_allowed = ();
for (split( /,/, ( defined($::opt_d) ? $::opt_d : "" ) )) { 
    $break_points_allowed{$_} = 1; 
}
my $nr_break_points_allowed = keys %break_points_allowed;
my $force_done = $::opt_D;
my $print_source_file = $::opt_F;
my $print_help = $::opt_h;
my $print_process_id = $::opt_i;
my $print_source_line = $::opt_L;
my $print_level = $::opt_n;
my $print_sequence = $::opt_N;
my $print_name = $::opt_P;
# explicit since it will be used in other packages
$main::resolution = ( defined($::opt_r) ? int($::opt_r) : 1000 );
my %functions_allowed = ();
for (split( /,/, ( defined($::opt_t) ? $::opt_t : "" ) )) { 
    $functions_allowed{$_} = 1; 
}
my $print_date = $::opt_T;
my $print_version = $::opt_v;
my $nr_functions_allowed = keys %functions_allowed;

my $DEBUG = ( exists($ENV{DEBUG}) && $ENV{DEBUG} > 0 ? 1 : 0 );

if ( $print_help ) {
    &usage;
    exit;
} elsif ( $print_version ) {
    &version;
    exit;
}

undef $::opt_d;
undef $::opt_D;
undef $::opt_F;
undef $::opt_h;
undef $::opt_i;
undef $::opt_L;
undef $::opt_n;
undef $::opt_N;
undef $::opt_P;
undef $::opt_r;
undef $::opt_t;
undef $::opt_T;
undef $::opt_v;

my $sep = '#';

my ( $TRACE_ON, $DEBUG_ON, $PROFILE_ON ) = ( 1, 2, 4 );

my %dbug_uid_list;

my ($version, $dbug_uid, $date, $name, $dbug_ctx, $pid, $flags, $maxcount, 
    $stack_usage);
my ($file, $function, $line, $level, $break_point, $str, $time);
my $old_dbug_uid = '';
my $nr_done = 0;

#
# GJP 6-4-2000
# Added @str for reading user defined input which also may contain # ($sep) in 
# dbug_print
#
my (@str);
my $dbug_uid_tot = dbug_uid->init( "", "total", 0, 0, 0 );

# All DBUG lines have the format DBUG separator DBUG CONTEXT and some
# operation id

# 10-5-2000: 
# 
# in user defined string a #D# might also appear, so check that $1 is only
# three fields
#
my $dbug_init_fmt  = "^DBUG#([^#]*#[^#]*#[^#]*)#I#(.*)";
my $dbug_done_fmt  = "^DBUG#([^#]*#[^#]*#[^#]*)#D#(.*)";
my $dbug_enter_fmt = "^DBUG#([^#]*#[^#]*#[^#]*)#E#(.*)";
my $dbug_leave_fmt = "^DBUG#([^#]*#[^#]*#[^#]*)#L#(.*)";
my $dbug_print_fmt = "^DBUG#([^#]*#[^#]*#[^#]*)#P#(.*)";

$| = 1; # auto flush

select STDOUT;

while (<STDIN>) {
    s/(\n|\r)+//go; # remove linefeed and carriage return

    debug("line $.:", $_);
    
    $dbug_uid = '';

    if ( m/$dbug_init_fmt/ ) {

        # dbug_init

        ( $dbug_uid, $date, undef ) = split( $sep, $1 );

        ( $version, $name, $dbug_ctx, $pid, $flags ) = split( /$sep/, $2 );

        if ( $version ge '1.3.0' ) {

            if ( !defined( $dbug_uid_list{ $dbug_uid } ) ) {
                $dbug_uid_list{ $dbug_uid } = 
                    dbug_uid->init( $version, $name, $dbug_ctx, $pid, $flags );
            }
        }

    } elsif ( m/$dbug_done_fmt/ ) {

        # dbug_done

        ( $dbug_uid, $date, undef ) = split( $sep, $1 );

        ( $maxcount, $stack_usage ) = split( /$sep/, $2 );

        if ( defined( $dbug_uid_list{ $dbug_uid } ) ) {
            $dbug_uid_list{ $dbug_uid }->done( $maxcount, $stack_usage );
            $nr_done++;
            undef $dbug_uid_list{ $dbug_uid };
        } else {
            carp "Debugging context $dbug_uid not defined.";
        }
    } elsif ( m/$dbug_enter_fmt/ ) {

        # dbug_enter

        ( $dbug_uid, $date, undef ) = split( $sep, $1 );

        ( $file, $function, $line, $level, $time ) = split( /$sep/, $2 );

        if ( defined( $dbug_uid_list{ $dbug_uid } ) ) {
            $dbug_uid_list{ $dbug_uid }->enter( $file, $function, $line,
                                                $level, $time, $date );
        } else {
            carp "Debugging context $dbug_uid not defined.";
        }
    } elsif ( m/$dbug_leave_fmt/ ) {

        # dbug_leave

        ( $dbug_uid, $date, undef ) = split( $sep, $1 );

        ( $file, $function, $line, $level, $time ) = split( /$sep/, $2 );

        if ( defined( $dbug_uid_list{ $dbug_uid } ) ) {
            $dbug_uid_list{ $dbug_uid }->leave( $file, $function, $line, $level, 
                                                $time, $date );
        } else {
            carp "Debugging context $dbug_uid not defined.";
        }
    } elsif ( m/$dbug_print_fmt/ ) {

        # dbug_print

        ( $dbug_uid, $date, undef ) = split( $sep, $1 );

        # GJP 6-4-2000
        # Read user defined string as a list because it may contain the 
        # separator as well. Then convert it to a scalar by using join.
        ( $file, $function, $line, $level, $break_point, @str ) = split( /$sep/, $2 );
        $str = join( $sep, @str );

        if ( defined( $dbug_uid_list{ $dbug_uid } ) ) {
            $dbug_uid_list{ $dbug_uid }->print( $file, $function, $line, $level, 
                                                $break_point, $str, $date );
        } else {
            carp "Debugging context $dbug_uid not defined.";
        }
    } else {
        print $_, "\n"; # any normal line in the input
    }

    # GJP 16-06-2000
    # If dbug uid's are different (threads) print an empty line for better readability

    if ( $dbug_uid ne '' ) {
        if ( $old_dbug_uid ne '' && $old_dbug_uid ne $dbug_uid ) {
            print "\n";
        }
        $old_dbug_uid = $dbug_uid;
    }
}

# GJP 2022-11-24  The Perl script dbugrpt does not run.
# https://github.com/TransferWare/dbug/issues/3

if (defined($force_done) && $force_done) {
    foreach my $dbug_uid (keys %dbug_uid_list) {
        if ( defined( $dbug_uid_list{ $dbug_uid } ) ) {
            $dbug_uid_list{ $dbug_uid }->done( 0, 0 );
            $nr_done++;
            undef $dbug_uid_list{ $dbug_uid };
        }
    }
}

# print totals unless done has never been called

$dbug_uid_tot->done(0, 0)
    unless ($nr_done <= 1);

# end of main

sub debug {
    print STDERR "@_\n"
        if ($DEBUG);
}

sub usage {

    printf STDOUT <<"_EOT_";

Usage: dbugrpt <options>

  where options are:

  -d <break points>    Enable output from DBUG_PRINT macros which have a
                       break point which is in the list of specified
                       break points (separated by a comma).
                       A null list means all break points are enabled.

  -D                   Emulate a done() call (if missing) at the end of each
                       debugging context in order to print totals.

  -F                   Mark each debugger output line with the name of the
                       source file containing the macro causing the output.

  -h                   This help.

  -i                   Identify the process emitting each line of debug
                       or trace output with the process id for that process.

  -L                   Mark each debugger output line with the source file
                       line number of the macro causing the output.

  -n                   Mark each debugger output line with the
                       current function nesting depth.

  -N                   Sequentially number each debugger output line
                       starting at 1. This is useful for reference purposes
                       when debugger output is interspersed with program output.

  -P                   Mark each debugger output line with the name of the
                       debugging context as supplied to DBUG_INIT.

  -r <resolution>      The time resolution. A value of 1000 (default) means that 
                       time is printed in milliseconds.

  -t <functions>       Limit debugger and profiling actions to the specified list
                       of comma separated functions. A null list of functions
                       implies that all functions are selected.

  -T                   Print date/time of each output line.

  -v                   Print the version.

Dbugrpt reads from stdin.

_EOT_
  exit(1);
}

sub version {
    print STDOUT "dbugrpt version: @PACKAGE_VERSION@\n";
}

package dbug_uid;

use strict;
use Carp qw(carp);
use warnings;
use bignum;

use constant MAX_PER_SEC => 1; # 1000000000;
use constant PERC_FMT => '%3.2f';

sub TIME_DIGITS {
    return int(log($main::resolution) / log(10));
}

sub TIME_FMT {
    return "%7." . TIME_DIGITS . "f";
}

sub init {
    my ($pkg, $version, $name, $dbug_ctx, $pid, $flags) = @_;
    my $r_dbug_uid = {
        VERSION => $version,
        NAME => $name,
        DBUG_CTX => $dbug_ctx,
        PID => $pid,
        FLAGS => $flags,
        LINENO => 0,
        STACK => [],
        TIME => {}, # total time spent for each function
        MIN_TIME => {}, # minimum time spent for each function
        MAX_TIME => {}, # maximum time spent for each function
        CALLS => {}, # number of calls for each function
        START_TIME => undef, # start profiling time
        END_TIME => undef  # end profiling time 
        };

    bless $r_dbug_uid, $pkg;

    # set profiling on for $dbug_uid_tot if any is set
    if ( $flags & $PROFILE_ON ) {
        $dbug_uid_tot->{FLAGS} = $PROFILE_ON;
    }

    return $r_dbug_uid;
}

sub version {
    my $obj = shift;

    @_ ? $obj->{VERSION} = shift : $obj->{VERSION};
}

sub name {
    my $obj = shift;

    @_ ? $obj->{NAME} = shift : $obj->{NAME};
}

sub dbug_ctx {
    my $obj = shift;

    @_ ? $obj->{DBUG_CTX} = shift : $obj->{DBUG_CTX};
}

sub pid {
    my $obj = shift;

    @_ ? $obj->{PID} = shift : $obj->{PID};
}

sub lineno {
    my $obj = shift;

    @_ ? $obj->{LINENO} = shift : $obj->{LINENO};
}

sub tracing {
    my $obj = shift;

    $obj->{FLAGS} & $TRACE_ON;
}

sub profiling {
    my $obj = shift;

    $obj->{FLAGS} & $PROFILE_ON;
}

sub debugging {
    my $obj = shift;

    $obj->{FLAGS} & $DEBUG_ON;
}

sub start_time {
    my $obj = shift;

    @_ ? $obj->{START_TIME} = shift : $obj->{START_TIME};
}

sub end_time {
    my $obj = shift;

    @_ ? $obj->{END_TIME} = shift : $obj->{END_TIME};
}

sub time {
    my $obj = shift;
    my $function = shift;

    if (@_) {
        eval '${$obj->{TIME}}{ $function }' . "@_";
    }
    return ${$obj->{TIME}}{ $function };
}

sub min_time {
    my $obj = shift;
    my $function = shift;

    if ( @_ ) {
        my $time = shift;
        my $r_old_time = \${$obj->{MIN_TIME}}{$function};

        # [ 719574 ] zero min time shows minus sign
        $time = 0 if ( $time < 0 );

        if ( !defined($$r_old_time) || $$r_old_time > $time ) {
            $$r_old_time = $time;
        }
    }
    return ${$obj->{MIN_TIME}}{ $function };
}

sub max_time {
    my $obj = shift;
    my $function = shift;

    if ( @_ ) {
        my $time = shift;
        my $r_old_time = \${$obj->{MAX_TIME}}{$function};

        # [ 719574 ] zero min time shows minus sign
        $time = 0 if ( $time < 0 );

        if ( !defined($$r_old_time) || $$r_old_time < $time ) {
            $$r_old_time = $time;
        }
    }
    return ${$obj->{MAX_TIME}}{ $function };
}

sub calls {
    my $obj = shift;
    my $function = shift;

    if (@_) {
        eval '${$obj->{CALLS}}{ $function }' . "@_";
    }
    return ${$obj->{CALLS}}{ $function };
}

sub update {
    my $obj = shift;
    my $function = shift;
    my $time = shift;

#    ${$obj->{TIME}}{ $function } += $time;
    $obj->time($function, '+=', $time);
    $obj->min_time($function, $time);
    $obj->max_time($function, $time);
#    ${$obj->{CALLS}}{ $function }++;
    $obj->calls($function, '++');
}

sub stack_push {
    my $obj = shift;
    
    return push( @{$obj->{STACK}}, shift );
}

sub stack_pop {
    my $obj = shift;
    
    return pop( @{$obj->{STACK}} ); # return last element or undef when empty
}


#
#  FUNCTION
#
#       is_break_point    test keyword for member of keyword list
#
#  SYNOPSIS
#

sub is_break_point {
    my ($dbug_uid, $function, $break_point) = @_;

#
#  DESCRIPTION
#
#       Test a break point to determine if it is in the currently active
#       break point list.  As with the function list, a break point is accepted
#       if the list is null, otherwise it must match one of the list
#       members.  When debugging is not on, no break points are accepted.
#       After the maximum trace level is exceeded, no break points are
#       accepted (this behavior subject to change).  Additionally,
#       the current function and process must be accepted based on
#       their respective lists.
#
#       Returns TRUE if break point accepted, FALSE otherwise.
#

    $dbug_uid->debugging &&
        (
         $nr_functions_allowed == 0 ||
         defined( $functions_allowed{ $function } )
         ) &&
             (
              $nr_break_points_allowed == 0 ||
              defined( $break_points_allowed{ $break_point } ) 
              );
}

#
#  FUNCTION
#
#       is_profile_function    check to see if profiling is currently enabled 
#                              for a function
#
#  SYNOPSIS

sub is_profile_function {
    my ($dbug_uid, $function) = @_;

#
#  DESCRIPTION
#
#       Checks to see if profiling is enabled based on whether the
#       user has specified profiling, the maximum trace depth has
#       not yet been reached, the current function is selected,
#       and the current process is selected.  Returns TRUE if
#       profiling is enabled, FALSE otherwise.
#
#

    $dbug_uid->profiling &&
        ( $nr_functions_allowed == 0 ||
          defined( $functions_allowed{ $function } ) );
}

#
#  FUNCTION
#
#       is_trace_function    check to see if tracing is currently enabled 
#                            for a function
#
#  SYNOPSIS
#

sub is_trace_function {
    my ($dbug_uid, $function) = @_;

#
#  DESCRIPTION
#
#       Checks to see if tracing is enabled based on whether the
#       user has specified tracing, the current function is selected,
#       and the current process is selected.  Returns TRUE if
#       tracing is enabled, FALSE otherwise.
#
#

    $dbug_uid->tracing &&
        ( $nr_functions_allowed == 0 ||
          defined( $functions_allowed{ $function } ) );
}

sub call_push {
    my ($obj, $function, $level, $enter_time) = @_;

    my $r_dbug_stack = dbug_stack->new($function, $level, $enter_time);

    $obj->stack_push($r_dbug_stack);
}

#
# call_pop
#
# Called when a function pops from the call stack.
# Incomplete enter/leave combinations are adjusted for.
# Timing data is updated for this function as well for the children.
#
# PRECONDITION: Only call when profiling is on for the object.
#
# IN: object     - a dbug_uid instance
#     function   
#     level
#     leave time
# 
# RETURN: time spent for this call (between enter and leave minus time of children)
#
sub call_pop {
    my ($obj, $function, $level, $leave_time) = @_;
    my $dbug_stack = $obj->call_top();
    my $time = 0;
    my $enter_time = undef;

    # adjust for incomplete enter/leave combinations

    while ( $dbug_stack->level() > $level ) {
        $obj->stack_pop;
        $dbug_stack = $obj->call_top;
    }

    if ( $dbug_stack->level() == $level ) {
        $enter_time = $dbug_stack->enter_time();

        # set the time to time when leaving minus time when entering minus time of children
        $time = $leave_time - $enter_time - $dbug_stack->time_children;

        # update time and calls for function

        $obj->update($function, $time);

        # update time and calls for function for total

        $dbug_uid_tot->update($function, $time);

        # Update the time for next in the hierarchy.
        # Since this item is removed (via stack_pop) the time of this call
        # has to be subtracted from the call before this one.

        if ( defined($obj->stack_pop) && defined($dbug_stack = $obj->call_top) ) {
            # GJP 28-02-2003
            # request id 695260
            # Do not forget the previous calls, so update it.
            $dbug_stack->time_children( '+=', $leave_time - $enter_time );
        }

    } else {
        carp(sprintf( "Level (%d) does not match level of stack top (%d)\n", 
                      $level, $dbug_stack->level() ));
    }

    return ( defined($enter_time) ? ( $leave_time - $enter_time, $time ) : ( undef, undef ) );
}

sub call_top {
    my ($obj) = @_;

    ${$obj->{STACK}}[$#{$obj->{STACK}}];
}

# declare variables for write

$main::report_no = 0; # force a different report top and body by incorporating the number

my ($g_function, $g_calls, $g_tot_calls, $g_time, $g_avg_time_per_call, 
    $g_min_time_per_call, $g_max_time_per_call);
my ($g_tot_time, $g_perc_calls, $g_perc_time, $g_weight);

sub done {
    my ($obj, $maxcount, $stack_usage) = @_;
    my $dbug_name = $obj->name();
    my ($min_time, $max_time);

    if ($obj->profiling())
    {
        my ($max_length, @time);

        ($max_length, $g_tot_calls, $g_tot_time) = $obj->totals;

        $time[0] = "=" x ( 8 + TIME_DIGITS );
        $time[1] = "-" x ( 8 + TIME_DIGITS );
        $time[2] = "Time" . ( " " x ( 4 + TIME_DIGITS ) );
        $time[3] = "----" . ( " " x ( 4 + TIME_DIGITS ) );
        $time[4] = ( " " x ( 4 + TIME_DIGITS ) ) . "time";
        $time[5] = ( " " x ( 5 + TIME_DIGITS ) ) . "avg";
        $time[6] = ( " " x ( 5 + TIME_DIGITS ) ) . "min";
        $time[7] = ( " " x ( 5 + TIME_DIGITS ) ) . "max";
        $time[8] = '@>>>>>>>' . ( '>' x TIME_DIGITS );
        
        my $total_line1 = 
            ( "=" x $max_length )      . " ======= ======= $time[0] ====== $time[0] $time[0] $time[0] =======";
        my $total_line2 = 
            ( " " x $max_length )      . " ======= ======= $time[0] ======                    ";

        $main::report_no++;

        $^ = "top_${main::report_no}";
        $~ = "fmt_${main::report_no}";

        my $format_top = 
"format $^ =\n\n" .
( "-" x length( $total_line1 ) ) . "\n" .
"Profile of execution for debug context '$dbug_name'\n" .
"Stack usage: $stack_usage bytes\n" .
"Execution times are in seconds\n\n" .
( " " x $max_length )                  . " Calls           $time[2]        Time/call (excluding callees)\n" .
( " " x $max_length )                  . " -----           $time[3]        -----------------------------\n" .
"function" . (" " x ($max_length - 8)) . " # calls % calls $time[4] % time $time[5] $time[6] $time[7]  weight\n" .
$total_line1 . "\n" .
".\n";

        eval $format_top;

        my $format = 
"format $~ =\n" .
"@" . ("<" x ( $max_length - 1 ))      . " @>>>>>> @>>>>>> $time[8] @>>>>> $time[8] $time[8] $time[8] @>>>>>>\n" .
"\$g_function,\$g_calls,\$g_perc_calls,\$g_time,\$g_perc_time,\$g_avg_time_per_call,\$g_min_time_per_call,\$g_max_time_per_call,\$g_weight\n" .
".\n";

        eval $format;

        $^L = "\n"; # no form feed on a new page but a new line

        $= = 100000; # a very large page size
        $- = 0; # force a new page

        foreach $function (sort(keys %{$obj->{CALLS}})) {
            $g_function = $function;
            $g_calls = $obj->calls($function);
            $g_time = $obj->time($function);
            $min_time = $obj->min_time($function);
            $max_time = $obj->max_time($function);

            if ($g_tot_time > 0) {
                $g_perc_time = sprintf( PERC_FMT, ($g_time * 100) / $g_tot_time );
            } else {
                $g_perc_time = 0;
            }
                
            # issue 1061551 Timing incorrect error
            # Since not all calls may be measured or the time measurement overhead is not
            # insignificant the missing time is assigned to function UNKNOWN.
            # The numbe of calls is undefined then.

            if ( !defined($g_calls) ) {
                $g_calls = '';
                $g_perc_calls = '';
                $g_weight = '';
                $g_avg_time_per_call = '';
                $g_min_time_per_call = '';
                $g_max_time_per_call = '';
            } else {
                $g_perc_calls = ($g_tot_calls != 0 ? sprintf( PERC_FMT, ($g_calls * 100) / $g_tot_calls ): 0);
                $g_weight = int($g_perc_time * $g_perc_calls);
    # Sourceforge issue 1174400
                $g_avg_time_per_call = sprintf( TIME_FMT, $g_time / ( $g_calls * MAX_PER_SEC ) );
                $g_min_time_per_call = ( defined($min_time) ? sprintf( TIME_FMT, $min_time / MAX_PER_SEC ) : 0 );
                $g_max_time_per_call = ( defined($max_time) ? sprintf( TIME_FMT, $max_time / MAX_PER_SEC ) : 0 );
            }
            $g_time = sprintf( TIME_FMT, $g_time / MAX_PER_SEC );
    
            write;
        }

        # Print a total line

        $- -= 2; # adjust for using print twice

        print $total_line2, "\n";

        $g_function = "Totals";
        $g_calls = $g_tot_calls;
        $g_perc_calls = '100.00';
        $g_time = sprintf( TIME_FMT, $g_tot_time / MAX_PER_SEC );
        $g_perc_time = '100.00';
        $g_avg_time_per_call = '';
        $g_min_time_per_call = '';
        $g_max_time_per_call = '';
        $g_weight = '';

        write;

        print "-" x length( $total_line1 ), "\n";
    }
}

sub totals {
    my ($obj) = @_;
    my ($max_length, $tot_calls, $tot_time) = (24, 0, 0);

    foreach $function (keys %{$obj->{CALLS}}) {
        $tot_calls += $obj->{CALLS}{ $function } if defined($obj->{CALLS}{ $function });
        $tot_time += $obj->{TIME}{ $function };

#           print STDOUT "\nTime for $function: ", $obj->{TIME}{ $function }, "\n";

        if ( length( $function ) > $max_length ) {
            $max_length = length( $function );
        }
    }

    if ( defined($obj->start_time()) && defined($obj->end_time()) &&
         # GJP 23-02-2004 Round the floating point numbers
         # GJP 14-04-2004 Not any more
         $tot_time != $obj->end_time() - $obj->start_time() ) {
        # issue 1061551 Timing incorrect error
        # Since not all calls may be measured or the time measurement overhead is not
        # insignificant the missing time is assigned to function UNKNOWN.

        debug("total time (", $tot_time, ") != end time (", $obj->end_time(), ") - start time (", $obj->start_time(), ")");

        my ($file, $function, $level, $date) = (undef, '*** UNKNOWN ***', 1, undef);

        $obj->{CALLS}{ $function } = undef;
        $obj->{TIME}{ $function } = ($obj->end_time() - $obj->start_time() - $tot_time);

        $dbug_uid_tot->{CALLS}{ $function } = undef
            unless defined($dbug_uid_tot->{CALLS}{ $function });
        $dbug_uid_tot->{TIME}{ $function } = ($obj->end_time() - $obj->start_time() - $tot_time)
            unless defined($dbug_uid_tot->{TIME}{ $function });

        $tot_time += ($obj->end_time() - $obj->start_time() - $tot_time);
    }

    return ($max_length, $tot_calls, $tot_time);
}

sub prefix {
    my ($obj, $file, $line, $level, $date) = @_;
    
    print( sprintf ("%04d-%02d-%02d %02d:%02d:%02d@DBUGRPT_PREFIX_SEPARATOR@ ",
                    substr($date, 0, 4), substr($date, 4, 2), substr($date, 6, 2),
                    substr($date, 8, 2), substr($date, 10, 2), substr($date, 12, 2)))
        if ($print_date);
    print ($obj->pid(), "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_process_id);
    print ($obj->lineno($obj->lineno()+1), "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_sequence);
    print ($obj->name, "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_name);
    print ($file, "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_source_file);
    print ($line, "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_source_line);
    print ($level, "@DBUGRPT_PREFIX_SEPARATOR@ ") if ($print_level);
}

sub indent {
    my ($obj, $level) = @_;

    print ("|   " x ($level-1));
}

sub enter {
    my ($obj, $file, $function, $line, $level, $time, $date) = @_;

    if ($obj->is_trace_function($function)) {
        $obj->prefix($file, $line, $level, $date);
        $obj->indent($level);
        print (">$function\n");
    } 

    if ($obj->is_profile_function($function)) {
        if ( $obj->version ge '3.0.0' ) {
            $time *= MAX_PER_SEC;
        }
        # set start time only first time
        $obj->start_time($time) unless defined($obj->start_time());

        $obj->call_push($function, $level, $time);
    }
}

sub leave {
    my ($obj, $file, $function, $line, $level, $leave_time, $date) = @_;
    my ($time_incl, $time_excl);

    if ($obj->is_trace_function($function)) {
        $obj->prefix($file, $line, $level, $date);
        $obj->indent($level);
    } 

    if ($obj->is_profile_function($function)) {
        if ( $obj->version ge '3.0.0' ) {
            $leave_time *= MAX_PER_SEC;
        }           
        # set end time always
        $obj->end_time($leave_time);

        ($time_incl, $time_excl) = $obj->call_pop($function, $level, $leave_time);
    }

    if ($obj->is_trace_function($function)) {
        print("<$function");
        if ( defined($time_incl) ) {
            printf( ';  elapsed time: ' . TIME_FMT . ' (incl.), ' . TIME_FMT . ' (excl.)',
                    $time_incl / MAX_PER_SEC, $time_excl / MAX_PER_SEC );
        }
        print("\n");
    }
}

sub print {
    my ($obj, $file, $function, $line, $level, $break_point, $str, $date) = @_;

    if ( $obj->is_break_point( $function, $break_point ) ) {
        $obj->prefix($file, $line, $level, $date);
        if ($obj->tracing()) {
            $obj->indent($level+1);
        } else {
            print ("$function@DBUGRPT_PREFIX_SEPARATOR@ ");
        }
        print ("$break_point@DBUGRPT_PREFIX_SEPARATOR@ $str\n");
    }
}

package dbug_stack;

use strict;
use Carp qw(carp);

sub new {
    my ($pkg, $function, $level, $enter_time) = @_;
    my $r_dbug_stack = {
        FUNCTION => $function,
        LEVEL => $level,
        ENTER_TIME => $enter_time,
        TIME_CHILDREN => 0
        };

    bless $r_dbug_stack, $pkg;

    return $r_dbug_stack;
}

sub function {
    my $obj = shift;

    @_ ? $obj->{FUNCTION} = shift : $obj->{FUNCTION};
}

sub level {
    my $obj = shift;

    @_ ? $obj->{LEVEL} = shift : $obj->{LEVEL};
}

sub enter_time {
    my $obj = shift;

    @_ ? $obj->{ENTER_TIME} = shift : $obj->{ENTER_TIME};
}

sub time_children {
    my $obj = shift;

    if (@_) {
        eval '$obj->{TIME_CHILDREN}' . "@_";
    }
    return $obj->{TIME_CHILDREN};
}
